{"version":3,"sources":["calcs.js","Timer.js","App.js","serviceWorker.js","index.js"],"names":["defaultState","currentTimer","breakLength","sessionLength","timerState","timeLeft","Timer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onIncrementBreak","length","state","setState","console","log","onIncrementSession","onDecrementBreak","onDecrementSession","onClickStartStop","myInterval","setInterval","audio","play","clearInterval","onClickReset","pause","currentTime","bind","assertThisInitialized","_this2","displaySession","displayBreak","timeDisplay","time","min","Math","floor","sec","concat","displayTime","convertTime","isTimerRunning","react_default","a","createElement","Paper_default","id","className","Typography_default","variant","Fab_default","size","color","onClick","disabled","Remove_default","Add_default","toUpperCase","Button_default","preload","src","ref","Component","App","align","src_Timer_0","Chip_default","label","href","component","clickable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c56d3c3a.chunk.js","sourcesContent":["export const convertTime = time => {\r\n  let min = Math.floor(time / 60)\r\n  let sec = time - (min*60)\r\n  min = min < 10 ? `0${min}` : min\r\n  sec = sec < 10 ? `0${sec}` : sec\r\n  const displayTime = `${min}:${sec}`\r\n  if (displayTime === '00:00'){\r\n    console.log(displayTime)\r\n  }\r\n  return displayTime\r\n}\r\n\r\nexport const defaultState = {\r\n    currentTimer: 'session',\r\n    breakLength: 300,\r\n    sessionLength: 1500,\r\n    timerState: 'stopped', // state either stopped or running\r\n    timeLeft: 1500,\r\n}","import React, { Component } from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport MinusIcon from '@material-ui/icons/Remove';\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nimport {convertTime,defaultState} from './calcs'\r\n\r\nclass Timer extends Component {\r\n  constructor(){\r\n    super()\r\n    this.state = defaultState \r\n    this.onClickStartStop = this.onClickStartStop.bind(this)\r\n    this.onClickReset = this.onClickReset.bind(this)\r\n    this.onDecrementBreak = this.onDecrementBreak.bind(this)\r\n    this.onIncrementBreak = this.onIncrementBreak.bind(this)\r\n    this.onIncrementSession = this.onIncrementSession.bind(this)\r\n    this.onDecrementSession = this.onDecrementSession.bind(this)\r\n  }\r\n  onIncrementBreak = () => {\r\n    const length = this.state.breakLength\r\n    length < 3600  ? //  length too high return \r\n      this.state.currentTimer === 'break' ?   // if current timer on break then reset time left to new break length\r\n        this.setState({breakLength: length + 60, timeLeft: length + 60})  : this.setState({breakLength: length + 60}) \r\n      : console.log('max duration reached')\r\n  }\r\n  onIncrementSession = () => {\r\n    const length = this.state.sessionLength\r\n    length < 3600  ? //  length too high return \r\n      this.state.currentTimer === 'session' ? // if current timer on session then reset time left to new session length\r\n        this.setState({sessionLength: length + 60, timeLeft: length + 60 }) : this.setState({sessionLength: length + 60})   \r\n      : console.log('max duration reached')\r\n  }\r\n  onDecrementBreak = () => {\r\n    const length = this.state.breakLength\r\n    length > 60  ? //  length too low return\r\n      this.state.currentTimer === 'break' ? // if current timer on break then reset time left to new break length\r\n        this.setState({breakLength: length - 60, timeLeft: length - 60}) : this.setState({breakLength: length - 60}) \r\n      : console.log('min duration reached')\r\n  \r\n  }\r\n  onDecrementSession = () =>  {\r\n    const length = this.state.sessionLength\r\n    length > 60  ? //  length too low return\r\n      this.state.currentTimer === 'session' ? // if current timer on session then reset time left to new session length\r\n        this.setState({sessionLength: length - 60, timeLeft: length - 60}) : this.setState({sessionLength: length - 60})\r\n      : console.log('min duration reached')\r\n      \r\n  }\r\n\r\n  onClickStartStop = () => {\r\n    // if timer stopped -  timer begin running from value of session length \r\n    if(this.state.timerState === 'stopped') {\r\n      this.myInterval = setInterval( () => {\r\n        const timeLeft = this.state.timeLeft\r\n        // check if timer done\r\n        if(timeLeft === 0) {\r\n            this.audio.play()\r\n          // check which timer was used then reset timer with other timer (session / break)\r\n          return this.state.currentTimer === 'session' ? this.setState({timeLeft: this.state.breakLength, currentTimer: 'break'}) : this.setState({timeLeft: this.state.sessionLength, currentTimer: 'session'})\r\n        }\r\n        // if timer not done count down 1 off of current time\r\n        this.setState({timeLeft: timeLeft - 1})\r\n      }, 1000)\r\n      return this.setState({timerState:'running'})\r\n    }\r\n    else {\r\n      clearInterval(this.myInterval)\r\n      return this.setState({timerState:'stopped'})\r\n    }\r\n  }\r\n  onClickReset = () => {\r\n    clearInterval(this.myInterval)\r\n    this.audio.pause()\r\n    this.audio.currentTime = 0\r\n    return this.setState( defaultState )\r\n  }\r\n  render() {\r\n    const displaySession = this.state.sessionLength / 60\r\n    const displayBreak = this.state.breakLength / 60\r\n    const timeDisplay = convertTime(this.state.timeLeft)\r\n    const isTimerRunning = this.state.timerState === 'running'\r\n    return (\r\n      <Paper id='timer'>\r\n        <div id='timer-setting'>\r\n          <div id='break-container' className='setting-container'>\r\n            <Typography id='break-label' className='label' variant='h5'> Break Length </Typography>\r\n            <Fab  id='break-decrement' className={'decrementBtn'} size='small' color='primary'\r\n              onClick={this.onDecrementBreak}\r\n              disabled={isTimerRunning}\r\n            >\r\n              <MinusIcon />\r\n            </Fab>\r\n            <div id='break-length' className='lengthDisplay digital-text'> {displayBreak} </div>\r\n            <Fab id='break-increment' className={'incrementBtn'}size='small'color='primary'\r\n              onClick={this.onIncrementBreak}\r\n              disabled={isTimerRunning}\r\n            >\r\n              <AddIcon />\r\n            </Fab>\r\n          </div>\r\n          <div id='session-container' className='setting-container'>\r\n            <Typography id='session-label' className='label' variant='h5'> Session Length </Typography>\r\n            <Fab id='session-decrement' className={'decrementBtn'} size='small' color='primary'\r\n              onClick={this.onDecrementSession}\r\n              disabled={isTimerRunning}\r\n            >\r\n              <MinusIcon />\r\n            </Fab>\r\n            <div id='session-length' className='lengthDisplay digital-text'> {displaySession} </div>\r\n            <Fab id='session-increment' className={'incrementBtn'} size='small' color='primary'\r\n              onClick={this.onIncrementSession}\r\n              disabled={isTimerRunning}\r\n            >\r\n              <AddIcon />\r\n            </Fab>\r\n          </div>\r\n        </div>\r\n        <div id='timer-display'>\r\n          <div id='timer-label' className='digital-text'> {this.state.currentTimer.toUpperCase()} </div>\r\n          <div id='time-left' className='digital-text' >{ timeDisplay } </div>\r\n        </div>\r\n        <div id='timer-controls'>\r\n          <Button  id='start_stop' onClick={this.onClickStartStop} color='primary' variant='outlined'> Start / Stop </Button>\r\n          <Button  id='reset' onClick={this.onClickReset} color='secondary' variant='outlined'> Reset </Button>\r\n        </div>\r\n        <audio id={'beep'} preload='auto'src={'https://goo.gl/65cBl1'} ref={ref => this.audio = ref}/>\r\n      </Paper>\r\n        \r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport './Timer.css'\r\nimport Timer from './Timer'\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Chip from '@material-ui/core/Chip'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className='App'>\r\n        <Paper id='title'>\r\n          <Typography variant='h3' align='center'>\r\n            Pomodoro Clock\r\n          </Typography>\r\n        </Paper>\r\n        <Timer/>\r\n        <div id='footer'>\r\n          <Chip\r\n            label={`A freeCodeCamp project by Hugh O'Neill`}\r\n            href='https://github.com/huuugh18'\r\n            component='a'\r\n            clickable\r\n          />\r\n        </div>          \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}